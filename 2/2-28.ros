#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(:swank :printv) :silent t))

(defpackage :ros.script.2-28.3684593782
  (:use :cl))
(in-package :ros.script.2-28.3684593782)



;; (defun fringe (tree)
;;   (labels ((iter (lis nil)
;;              (cond (listp lis)

;;                    ((not (null lis)) lis)
;;                    (t nil))))
;;     (iter tree nil))

;; (defun fringe (tree)
;;   (labels ((fringe-iter (ar dr ans)
;;              (print (list ar dr ans))
;;              (cond ((null ar) (fringe-iter (car dr) (cdr dr) ans))
;;                    ((null dr) (reverse (cons ar ans)))
;;                    ((and (listp ar) (listp dr)) (append
;;                                                  (fringe-iter (car ar) (cdr ar) ans)
;;                                                  (car (fringe-iter (car dr) (cdr dr) ans))))
;;                    ((listp ar)  (fringe-iter (car ar) (cdr ar) (append ans dr)))
;;                    ((listp dr) (fringe-iter (car dr) (cdr dr)  (cons ar ans)))
;;                    (t (print "ffffffffff")))))
;;     ;;(t (fringe-iter (car dr) (cdr dr) (cons ar ans))))))
;;     (fringe-iter (car tree) (cdr tree) nil)))

;; (defun filter (fn items)
;;   (unless (null items)
;;     (if (funcall fn (car items))
;;         (if (listp (car items))
;;             (append (list (car items)) (filter fn (cdr items)))
;;             (append (car items) (filter fn (cdr items))))
;;         (filter fn (cdr items)))))

;; (defun fringe (tree)
;;   (print tree)
;;   (cond ((null tree) nil)
;;         ((not (listp tree)) tree)
;;         (t (filter #'(lambda (x) (fringe x)) tree))))

(defvar x (list (list 1 2) (list 3 4)))


(defun fringe (lis)
  (cond ((null lis) nil)
        ((not (listp lis)) (list lis))
        (t (append (fringe (car lis))
                   (fringe (cdr lis))))))


(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (fringe x)
   (fringe '(((1) 2) 3))
   (fringe '(1 (2 (3))))
   (fringe '(1 ((2)) (3 (4 (5) 6)(7 8))))))
;;; vim: set ft=lisp lisp:
