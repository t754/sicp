#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(:swank :printv) :silent t))

(defpackage :ros.script.2-30.3684769633
  (:use :cl))
(in-package :ros.script.2-30.3684769633)

(defun square (x)
  (* x x))

(defun square-tree-map (lis)
  (mapcar
   (lambda (x)
     (if (listp x)
         (square-tree-map x)
         (square x)))
   lis))

(defun square-tree (lis)
  (labels
      ((iter (x fst)
         (let ((fst-result (cond ((listp fst)
                                  (if (not (null fst))
                                      (iter fst (car fst))))
                                 (t (square fst)))))
           (if (not (null fst-result))
               (cons fst-result (iter (cdr x) (cadr x)))))))
    (iter lis (car lis))))

;; (defun square-tree (lis)
;;   (labels
;;       ((iter (x fst)
;;          (cond ((listp fst)
;;                 (if (not (null fst))
;;                     (cons (iter fst (car fst))
;;                           (iter (cdr x) (cadr x)))))
;;                (t (cons (square fst)
;;                         (iter (cdr x) (cadr x)))))))
;;     (iter lis (car lis))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (square-tree-map '(1 (2 (3 4 7) (5 8))))
   (square-tree '(1 (2 (3 4 7) (5 8))))))
;;; vim: set ft=lisp lisp:
