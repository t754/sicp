#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(:swank :printv) :silent t))

(defpackage :ros.script.2-41.3685803982
  (:use :cl))
(in-package :ros.script.2-41.3685803982)

(defun enumerate-interval (low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (1+ low) high))))

(defun accumulate (op initial sequence)
  (if (null sequence)
      initial
      (funcall op (car sequence)
               (accumulate op initial (cdr sequence)))))

(defun flatmap (proc seq)
  (accumulate #'append nil (mapcar proc seq)))

(defun unique-pairs (n)
    (flatmap #'(lambda (x)
             (mapcar #'(lambda (y) (list x y))
                     (enumerate-interval 1 (1- x))))
             (enumerate-interval 1 n)))
(defun filter (pred seq)
  (cond ((null seq) nil)
        ((funcall pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (t (filter pred (cdr seq)))))


(defun uniq-triples (n target-sum)
  " 0<i<j<k<=n  (+ i j k) => s"
  (filter #'(lambda (kji) (apply #'> kji))
          (mapcar #'(lambda (li) (list (- target-sum (+ (car li) (cadr li))) (car li) (cadr li)))
                  (unique-pairs n))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (uniq-triples 5 8)
   (uniq-triples 10 17)))
;;; vim: set ft=lisp lisp:
