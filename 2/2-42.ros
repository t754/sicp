#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  )

(defpackage :ros.script.2-42.3685806404
  (:use :cl))
(in-package :ros.script.2-42.3685806404)

(defun enumerate-interval (low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (1+ low) high))))

(defun accumulate (op initial sequence)
  (if (null sequence)
      initial
      (funcall op (car sequence)
               (accumulate op initial (cdr sequence)))))

(defun flatmap (proc seq)
  (accumulate #'append nil (mapcar proc seq)))

(defun unique-pairs (n)
  (flatmap #'(lambda (x)
               (mapcar #'(lambda (y) (list x y))
                       (enumerate-interval 1 (1- x))))
           (enumerate-interval 1 n)))

(defun filter (pred seq)
  (cond ((null seq) nil)
        ((funcall pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (t (filter pred (cdr seq)))))

(defun my-remove (item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))

(defun permutations (s)
  (if (null s)   ;; 集合は空か?
      (list nil) ;; 空集合を持つ列
      (flatmap #'(lambda (x)
                   (mapcar #'(lambda (p)  (cons x p))
                           (permutations (my-remove x s))))
               s)))

(defun combination (lis)
  "ex:: (combination '(1 2 3)) => ((1 2) (1 3) (2 3))"
  (labels ((iter (ca cd acc)
             (if (or (null ca) (null cd))
                 acc
                 (iter (car cd)
                       (cdr cd)
                       (append acc (mapcar #'(lambda (x) (list ca x)) cd))))))
    (iter (car lis) (cdr lis) nil)))



(defun uniq? (lis)
  "要素に重複があるかチェック"
  (cond ((null lis) t)
        ((not (null (filter #'(lambda (v) (equal v (car lis)))
                            (cdr lis))))
         nil)
        (t (uniq? (cdr lis)))))

(defun naname? (pos-a pos-b)
  "斜めにあるかチェック"
  (= (abs (- (car pos-a)  (car pos-b)))
     (abs (- (cadr pos-a) (cadr pos-b)))))

;; posisions は '((x0 y0) (x1 y1)) とかとする
(defun safe? (k poss)
  (declare (ignorable k))
  (cond  ((= k 1) t)
         ((or (null (car poss)) (null (cadr poss))) nil)
         ((not (uniq? (mapcar #'car poss))) nil) ; x == x check
         ((not (uniq? (mapcar #'cadr poss))) (format t "yyyyyy~%") nil) ; y == y check
         (t ; 斜めチェック
          (not (accumulate #'(lambda (x y) (or x y)) nil
                           (mapcar #'(lambda (x)  (naname? (car x) (cadr x)))
                                   (combination poss)))))))



(defun adjoin-position (row col rest-of-queens)
  "位置集合に行,列を追加"
  (append rest-of-queens (list (list row col))))

(defvar empty-board nil)

(defun queens (board-size)
  (labels ((queen-cols (k)
             (if (= k 0)
                 (list empty-board)
                 (filter #'(lambda (positions) (safe? k positions))
                         (flatmap #'(lambda (rest-of-queens)
                                      (mapcar #'(lambda (new-row)
                                                  (adjoin-position new-row k rest-of-queens))
                                              (enumerate-interval 1 board-size)))
                                  (queen-cols (- k 1)))))))
    (queen-cols board-size)))

(defun queens< (x y)
  (cond ((null x) (not (null y)))
        ((null y) nil)
        ((= (car x) (car y)) (< (cadr x) (cadr y)))
        (t (< (car x) (car y)))))

(defun queen-print (board-size queens)
  (let ((sorted ;; (filter #'(lambda (x) (cond ((null x) (not (null (cadr x))))
                ;;                             ((null (cadr x)) nil)
                ;;                             ((equal x (cadr x))))))
          (sort queens #'queens<)))
    ;; (format t "~s~%" sorted)
    (loop for i from 1 to board-size do
         (loop for j from 1 to board-size do
              (format t "~c" (if (equal (car sorted) (list i j))
                                 (progn (pop sorted) #\*)
                                 #\ )))
         (format t "~%"))))


(defvar *board-size* 8)

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((ans (queens *board-size*)))
    (loop for v in ans do
         (queen-print *board-size* v)
         (format t "~v@{~A~:*~}~%" *board-size* "#"))
    (format t "anser pattarn num :: ~s~%" (length ans))))
;;; vim: set ft=lisp lisp:
