#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(swank printv) :silent t)
  )

(defpackage :ros.script.3-21.3702133892
  (:use :cl))
(in-package :ros.script.3-21.3702133892)

(defun set-car! (li x)
  (setf (car li) x))
(defun set-cdr! (li x)
  (setf (cdr li) x))
(defun front-ptr (queue)
  (car queue))
(defun rear-ptr (queue)
  (cdr queue))
(defun set-front-ptr! (queue item)
  (set-car! queue item))
(defun set-rear-ptr! (queue item)
  (set-cdr! queue item))
(defun empty-queue? (queue)
  (null (front-ptr queue)))

(defun make-queue ()
  (cons '() '()))
(defun front-queue (queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue ~S" queue)
      (car (front-ptr queue))))



;; (defun q1 (make-queue))
(defun insert-queue! (queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (t
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(defun delete-queue! (queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue ~S" queue))
        (t
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

(defun print-queue (queue)
  (format nil "~s" (car queue)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (defvar q1 (make-queue))
   (insert-queue! q1 'a)
   (print-queue q1)
   (insert-queue! q1 'b)
   (print-queue q1)
   (delete-queue! q1)
   (print-queue q1)
   (delete-queue! q1)
   (print-queue q1)
   ))
;;; vim: set ft=lisp lisp:
