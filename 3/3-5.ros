#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(swank printv) :silent t)
  (setq *random-state* (make-random-state t))
  )

(defpackage :ros.script.3-5.3696512246
  (:use :cl))
(in-package :ros.script.3-5.3696512246)


(defun random-in-range (low high)
  (let ((range (- high low)))
    (+ low (random range))))

(defun estimate-integral (P x1 x2 y1 y2)
  (lambda () (funcall P (random-in-range x1 x2) (random-in-range y1 y2))))

(defun square (x)
  (* x x))

(defun make-function-P (x1 x2 y1 y2)
"Check if there are points inside ellipse
â†“ latex formula
$\dfrac {\left( a-\dfrac {x_{2}+x_{1}} {2}\right) ^{2}} {\left( \dfrac {x_{2}-x_{1}} {2}\right) ^{2}}+\dfrac {\left( b-\dfrac {y_{2}+y_{1}} {2}\right) ^{2}} {\left( \dfrac {y_{2}-y_{1}} {2}\right) ^{2}}\leq 1$"
  (lambda (a b)
    (<= (+ (/ (square (- a (/ (+ x2 x1) 2)))
              (square (/ (- x2 x1) 2)))
           (/ (square (- b (/ (+ y2 y1) 2)))
              (square (/ (- y2 y1) 2))))
        1)))

(defun monte-carlo (trials experiment)
  (labels ((iter (trials-remaining trials-passed)
             (cond
               ((= trials-remaining 0)
                (/ trials-passed trials))
               ((funcall experiment)
                (iter (- trials-remaining 1)
                      (+ trials-passed 1)))
               (t
                (iter (- trials-remaining 1) trials-passed)))))
    (iter trials 0)))

(defun try-estimate-rectangle (xy1 xy2 try-num)
  (if (> (car xy1) (car xy2))
      (rotatef (car xy1) (car xy2)))
  (if (> (cadr xy1) (cadr xy2))
      (rotatef (cadr xy1) (cadr xy2)))
  (monte-carlo
   try-num
   (estimate-integral (make-function-p
                       (car xy1) (car xy2) (cadr xy1) (cadr xy2))
                      (car xy1) (car xy2) (cadr xy1) (cadr xy2))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)

  (printv:printv
   (/ pi 4)
   (format nil "~G"
           (try-estimate-rectangle (list (random 1000) (random 1000))
                                   (list (random 1000) (random 1000))
                                   1000000))))
;;; vim: set ft=lisp lisp:
