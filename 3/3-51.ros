#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(swank printv) :silent t) )

(defpackage :ros.script.3-51.3709446252
  (:use :cl))
(in-package :ros.script.3-51.3709446252)


(defun delay (exp)
  (lambda () exp))
(defun force (delayed-object)
  (funcall delayed-object))
(defun cons-stream (a b)
  (cons a (delay b)))

(defun stream-car (stream)
  (car stream))

(defun stream-cdr (stream)
  (force (cdr stream)))
(defun stream-null? (stream)
  (null stream))
(defvar the-empty-stream '())


(defun stream-enumerate-interval (low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))


(defun stream-ref(s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))


(defun stream-map (proc &rest argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (mapcar #'stream-car argstreams))
       (apply #'stream-map
              (cons proc (mapcar #'stream-cdr argstreams))))))

(defun show(x)
  (print x)
  x)

(defvar *x* )

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (setq *x* (stream-map #'show (stream-enumerate-interval 0 10)))
   (stream-ref *x* 5)
   (stream-ref *x* 7)))
;;; vim: set ft=lisp lisp:
