#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(swank printv) :silent t)
  )

(defpackage :ros.script.3-9.3697017059
  (:use :cl))
(in-package :ros.script.3-9.3697017059)

;;           +----------------------------------------------------------------------------------------------------------------------------+
;;           |                                                                                                                            |
;; global -->| factorial-r :-+                                                                                                            |
;; env       |               |                                                                                                            |
;;           +---------------+------------------------------------------------------------------------------------------------------------+
;;                           |      ^      ^                ^                ^                ^                ^                ^
;;                           v      |      |                |                |                |                |                |
;;                       +-+-+-+-+  |     +---------+      +---------+      +---------+      +---------+      +---------+      +---------+
;;                   +---+-+ + +-+--+     | n:6     |      | n:5     |      | n:4     |      | n:3     |      | n:2     |      | n:1     |
;;                   |   +---+---+    E1->|         |  E2->|         |  E3->|         |  E4->|         |  E5->|         |  E6->|         |
;;                   |                    +---------+      +---------+      +---------+      +---------+      +---------+      +---------+
;;                   v
;; pramateter : n
;; body :
 (defun factorial-r (n)             ;;
   (if (= n 1)                      ;;
       1                            ;;
       (* n (factorial-r (- n 1)))));;
;; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;;
;;           +----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
;;           | fact-iter:--+                                                                                                                                                                                |
;; global -->| factorial:--+--------+                                                                                                                                                                       |
;; env       |             |        |                                                                                                                                                                       |
;;           +-------------+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
;;                         |      ^ |           ^            ^                    ^                      ^                      ^                      ^                      ^                      ^
;;                         v      | |           |            |                    |                      |                      |                      |                      |                      |
;;                     +---+---+  | |           |      +-----+-------+      +-----+--------+       +-----+--------+       +-----+--------+       +-----+--------+       +-----+--------+       +-----+--------+
;;                 +---+-+ + +-+--+ |           | E1-->| n:6         | E2-->|  product:  1 |  E3-->|  product:  2 |  E4-->|  product:  6 |  E5-->|  product:  24|  E6-->|  product: 120|  E7-->|  product: 720|
;;                 |   +---+---+    |           |      |             |      |  counter:  1 |       |  counter:  2 |       |  counter:  3 |       |  counter:  4 |       |  counter:  5 |       |  counter:  6 |
;;                 |                +---------+ |      +-------------+      |  max-count:6 |       |  max-count:6 |       |  max-count:6 |       |  max-count:6 |       |  max-count:6 |       |  max-count:6 |
;;                 v                          | |                           +--------------+       +--------------+       +--------------+       +--------------+       +--------------+       +--------------+
;; pramateter : product counter max-count     | |
;; body :                                     | |
(defun fact-iter (product counter max-count);;| |
  (if (> counter max-count)                 ;;| |
      product                               ;;| |
      (fact-iter (* counter product)        ;;| |
                 (+ counter 1)              ;;| |
                 max-count)))               ;;| |
;;                                            | |
;;         +----------------------------------+ |
;;         |                                    |
;;         v      +-----------------------------+
;;     +-+-+-+-+  |
;; +---+-+ + +-+--+
;; |   +---+---+
;; |
;; v
;; pramateter : n
;; body :
(defun factorial (n) ;;
  (fact-iter 1 1 n)) ;;
;;

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq printv:*printv-output* *standard-output*)
  (printv:printv
   (factorial-r 6)
   (trace fact-iter)
   (factorial 6)))
;;; vim: set ft=lisp lisp:
