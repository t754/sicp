#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (load "./repl.lisp")
  )
(in-package :sicp4.repl)

(defun env-iter (var env func)
  (if (eq *the-empty-environment* env)
      nil
      (let ((frame (first-frame env)))
        (let ((po (position-if (lambda (x) (-eq x var)) (frame-variables frame))))
          (funcall func (and (numberp po)
                             (nthcdr po (frame-values frame))))))))


(defun lookup-variable-value (var env)
  (let ((result (env-iter var env
                          (lambda (vls)
                            (if (null vls)
                                (lookup-variable-value var (enclosing-environment env))
                                (car vls))))))
    (if (null result)
        (error "Unbound variable ~S" var)
        result)))

(defun set-variable-value! (var val env)
  (and (null (env-iter var env
                       (lambda (vls)
                         (if (null vls)
                             (set-variable-value! var val (enclosing-environment env))
                             (set-car! vls val)))))
       (error "Unbound variable -- SET! ~S" var)))


(defun define-variable! (var val env)
  (env-iter var env
            (lambda (vls)
              (if (null vls)
                  (add-binding-to-frame! var val (first-frame env))
                  (set-car! vls val)))))



(defpackage :ros.script.4-12.3719059193
  (:use :cl))
(in-package :ros.script.4-12.3719059193)

(defvar *str* "
(define (outer-func n)
    (define (inner-func n)
        (print \"inner-func-arg\")
      (print n)
      (print \"inner-set!\")
      (set! n 'a)
      (print n))

  (inner-func (+ n 10))

  (print \"outer-func-arg\")
  (print n)

  (print \"outer-set!\")
  (set! n 'b)
  (print n))
(outer-func 0)
(define a 1)
(+ a 3)
(set! a 4)
(list a)
")


(defun main (&rest argv)
  (declare (ignorable argv))
  (with-input-from-string (s1 *str*)
    (sicp4.repl:driver-loop s1)))
;;; vim: set ft=lisp lisp:
