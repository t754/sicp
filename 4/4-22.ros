#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp (ql:quickload '() :silent t)
  (load "analyze.lisp")
  )

(in-package :sicp4.repl)

(defun let? (exp)
  (tagged-list? exp 'let))

(defun let->combination (exp)
  (flet ((-vars (ex)
           (mapcar 'car (cadr ex)))
         (-exps (ex)
           (mapcar 'cadr (cadr ex))))
    (cons (cons 'lambda
                (cons (-vars exp)
                      (cddr exp)))
          (-exps exp))))


(defun analyze (exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((let?  exp) (analyze (let->combination exp)))
        ((application? exp) (analyze-application exp))
        (t
         (error "Unknown expression type -- ANALYZE ~s" exp))))



(defpackage :ros.script.4-22.3720875958
  (:use :cl))
(in-package :ros.script.4-22.3720875958)

(defvar *str* "
(let ((a 1)
      (b (+ 1 2)))
  (print a)
  (+ a b))
")

(defun main (&rest argv)
  (declare (ignorable argv))
  (with-input-from-string (s1 *str*)
    (sicp4.repl:driver-loop s1)))
;;; vim: set ft=lisp lisp:
