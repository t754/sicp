#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(swank printv) :silent t)
  (load "./repl.lisp")
  )

(in-package :sicp4.repl)

(defun and? (exp)
  (tagged-list? exp 'and))

(defun or? (exp)
  (tagged-list? exp 'or))

(defun eval-and (exp env)
  (labels ((-and (ex en prev)
             (if (null ex)
                 prev
                 (let ((tmp (eval (car ex) en)))
                   (if (false? tmp)
                       nil
                       (-and (cdr ex) en tmp))))))
    (-and (operands exp) env nil)))


(defun make-and (exp)
  (labels ((-make-and (ex)
             (if (null ex)
                 'true
                 (if (null (caddr ex))
                     (make-if (car ex)
                              (cadr ex)
                              'false)
                     (make-if (car ex)
                              (-make-and (cdr ex))
                              'false)))))
    (-make-and (cdr exp))))

(defun eval-or (exp env)
  (labels ((-or (ex en)
             (if (null ex)
                 nil
                 (let ((tmp (eval (car ex) en)))
                   (if (true? tmp)
                       tmp
                       (-or (cdr ex) en))))))
    (-or (operands exp) env)))

(defun make-or(exp)
  (labels ((-make-or (ex)
             (if (null ex)
                 'false
                 (list (list 'lambda '(var)
                               (make-if 'var 'var
                                        (if (null (cddr ex))
                                            (cadr ex)
                                            (-make-or (cdr ex)))))
                         (car ex)))))
    (-make-or (cdr exp))))
;; (eval-or exp env)
(defun eval (exp env)
  (cond ((self-evaluating? exp) exp)
        ((and? exp) (eval-and exp env)) ;; add
        ((or? exp) (eval-or exp env))   ;; add
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (t
         (error "Unknown expression type -- EVAL ~S" exp))))


(defpackage :ros.script.4-4.3715849241
  (:use :cl))
(in-package :ros.script.4-4.3715849241)

(defvar *script-str* '(
"
 (and 1 2)
 (and false false)
 (and 1 false)
 (and false 2)
 (and)
 (and (= 1 (print 1))
      (= 1 (print 2)))
 (and (= 9 (print 10))
      (= 9 (print 9)))
"
"
 (or false false 1)
 (or 8 1)
 (or true true)
 (or false false)
 (or true false)
 (or false true)
 (or)
 (or (= 1 (print 1))
     (= 1 (print 2)))
 (or (= 9 (print 10))
     (= 9 (print 9)))
"))

(defun main (&rest argv)
  (declare (ignorable argv))

  (dolist (str *script-str*)
    (with-input-from-string (s1 str)
      (sicp4.repl:driver-loop s1)))

  (print "=========================")
  (print "â†“derived expressions (macro)version")

  (defun sicp4.repl::eval-and (exp env)
    (sicp4.repl::eval (sicp4.repl::make-and exp) env))
  (defun sicp4.repl::eval-or (exp env)
    (sicp4.repl::eval (sicp4.repl::make-or exp) env))
  (dolist (str *script-str*)
    (with-input-from-string (s1 str)
      (sicp4.repl:driver-loop s1))))
;;; vim: set ft=lisp lisp:
