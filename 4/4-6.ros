#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp (ql:quickload '() :silent t)
  (load "./repl.lisp")
  )
(in-package :sicp4.repl)

(defun let? (exp)
  (tagged-list? exp 'let))

(defun let->combination (exp)
  (flet ((-vars (ex)
           (mapcar 'car (cadr exp)))
         (-exps (ex)
           (mapcar 'cadr (cadr exp))))
    (cons (list 'lambda (-vars exp)
                (cons 'begin (cddr exp)))
          (-exps exp))))



(defun eval (exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp) (eval (let->combination exp) env)) ;; add
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (t
         (error "Unknown expression type -- EVAL ~S" exp))))

(defpackage :ros.script.4-6.3717068055
  (:use :cl))
(in-package :ros.script.4-6.3717068055)
(defvar *str* "
(let ((a 1)
      (b (+ 1 2)))
  (print a)
  (+ a b))
")
(defun main (&rest argv)
  (declare (ignorable argv))
  (with-input-from-string (s1 *str*)
    (sicp4.repl:driver-loop s1)))
;;; vim: set ft=lisp lisp:
