#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp (ql:quickload '() :silent t)
  (load "./repl.lisp")
  )
(in-package :sicp4.repl)
(defun let? (exp)
  (tagged-list? exp 'let))

(defun name-let-name (exp)
  (cadr exp))

(defun name-let? (exp)
  (not (consp (cadr exp))))


(defun let->combination (exp)
  (flet ((-vars (ex)
           (mapcar 'car (cadr ex)))
         (-exps (ex)
           (mapcar 'cadr (cadr ex))))
    (if (name-let? exp)
        (let ((name (name-let-name exp)))
          (list 'begin
                (cons 'define (cons (cons name (-vars (cdr exp)))
                                    (cdddr exp)))
                (cons name (-exps (cdr exp)))))
        (cons (list 'lambda (-vars exp)
                    (cons 'begin (cddr exp)))
              (-exps exp)))))


;;e.g. (while test &body forms)
(defun while? (exp)
  (tagged-list? exp 'while))

(defun while->exp (exp)
  `(begin
    (define (while-iter)
        (if ,(cadr exp)
            (begin ,@(cddr exp)
                   (while-iter))))
    (while-iter)))

(defun do? (exp)
  (tagged-list? exp 'do))

;; common lisp do
;;(do ((VAR INIT [STEP])) (END-TEST [RESULT...]) BODY...)
(defun do->exp (exp)
  (--do->exp (nth 1 exp)
             (nth 2 exp)
             (cdddr exp)))

(defun --do->exp (steps endtest body )
  `(begin
     (let ,(mapcar (lambda (c)
                     (if (consp c) (list (car c) (nth 1 c)) c))
            steps)
       (while (not ,(car endtest))
              ,@body
              ,@(let ((sets (mapcar (lambda (c)
                                      (and (consp c)
                                           (cddr c)
                                           (list (car c) (nth 2 c))))
                                    steps)))

                  (if (null sets)
                      '(nil)
                      (mapcar (lambda (x) `(set! ,(car x) ,(cadr x))) sets))))
       ,@(or (cdr endtest) '(nil)))))




(defun eval (exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((while? exp) (eval (while->exp exp) env)) ;; add
        ((do? exp) (eval (do->exp exp) env)) ;; add
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (t
         (error "Unknown expression type -- EVAL ~S" exp))))


(defpackage :ros.script.4-9.3717769299
  (:use :cl))
(in-package :ros.script.4-9.3717769299)


(defvar *str* "
(let ((i 0))
  (while (< i 5)
         (print i)
         (set! i (+ i 1)))
  i)

(do ((n 1 (+ 1 n))
     (m 10.0 (/ m 2))
     (li '10 (list '/ li 2)))
    ((> n 10) (list n m li))
  (print n)
  (print m))
")

(defun main (&rest argv)
  (declare (ignorable argv))
  (with-input-from-string (s1 *str*)
    (sicp4.repl:driver-loop s1)))

;;; vim: set ft=lisp lisp:
